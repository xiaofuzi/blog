createdAt: "2018-10-12T07:18:12.103Z"
updatedAt: "2018-10-12T08:45:19.932Z"
type: "MARKDOWN_NOTE"
folder: "d3441b01ef2251aec113"
title: "如何撰写技术文档？（译文）"
content: '''
  # 如何撰写技术文档？（译文）
  
  [原文地址：What nobody tells you about documentation](https://www.divio.com/blog/documentation/)
  
  ![](https://divioag2017-live-e9fe0b8244c24280878375-8ae4759.divio-media.net/filer_public_thumbnails/filer_public/d0/ce/d0ced70d-d6f3-4006-8d48-448e07ba015b/documentation-blogpost-teaser.png__800x450_q90_crop_subsampling-2.png)
  
  如果你编写的文档有问题，那么不管你多面努力的完善文档也不会对你的软件产生积极意义。
  
  > 要想写好软件文档，你必须要知道并不只是有一种文档类型，而是四种类型的软件文档。
  
  分别是教程、指南、解释、参考。四种类型的文档分别代表这不同的功能，你只要理解好该写什么类型的文档才能使得你的软件文档具有意义。
  
  ## 介绍
  
  如果你的技术文档写得不够好，那么你软件写得再好，人们也是不会去用的。
  
  假如有人不得不去使用，没有好的文档会造成用户无法有效的和按照你预想的方式去使用你的软件。
  
  几乎所有的人都知道一份好的技术文档的重要性，他们也在尽量的编写一份好的文档，但大多数人失败了。不是因为他们没有用心去写，而是因为编写文档的方式是错误的。
  
  在这里我会告诉你用正确的方式去编写一份好的文档，书写更简单、维护更轻松。
  
  如果你能将我说的技巧应用在编写文档中，那么你将会提供出更好的文档，也会使得你的软件、产品、团队更容易成功。
  
  ## 编写技术文档的秘密
  
  技术文档可以划分为教程、指南、解释、技术参考四个方面，每一种类型需要用不同的写作模式。做为一个软件开发者，你需要在不同的时间提供不同类型的文档，所以一般来说，你需要为你的软件编写这四种类型的文档。
  
  技术文档需要按照这四种类型来组织同时将它们区分开，但又要让它们相互间具有链接关系。
  
  * 教程
      * 以学习为导向
      * 可用于帮助新手使用
      * 课程的形式
      
  > 教孩子厨艺
  
  * 指南
      * 以目标为导向
      * 说明如何解决一个特殊的问题
      * 系统化的步骤
      
  > 一本关于厨艺的书籍
  
  * 解释文档
      * 以理解为导向
      * 解释原理
      * 提供问题背景以及上下文
  
  > 一篇关于烹饪社会史的文章
  
  * 参考文档
      * 以信息输出为导向
      * 关于软件的描述
      * 准确且完整的
  
  > 一篇百科全书文章
  
  按上述将技术文档进行划分，可以让作者和读者清楚的知道从哪去获取什么样的信息。告知作者如何写？写什么？再哪写。这样明确的区别让作者不必浪费时间将所有的信息糅杂在一起，因为每一种类型的文档都有它自己的用户和意义。
  
  事实上，不按上述方式划分编写的技术文档是非常难以维护的，因为它同时包含了多个维度的信息而显得不伦不类的。
  
  一旦你理解了上述的文档分类方式，那么你将能够很好的分析当前文档以及改进文档，从而更好的维护。
  
  ## 项目文档
  
  你也许会问，更新日志、贡献者记录以及其它的项目记录信息如何匹配到上诉的分类中？答案是不需要，严格的说，项目文档并不是项目本身的一切信息。
  
  可以将这些信息进行单独的分类命名而不要揉合到其它类型的文档中。
  
  接下来，我们来看一下每一种类型文档的关键功能点。
  
  ## 教程
  
  教程也是课程，通过一系列的步骤来指导用户完成一个初步的项目。通过教程来让初学者可以通过你的软件来做出一些有用的东西。
  
  它是以学习为导向的，倾向于学习如何做而不是学习软件本身。
  
  作为导师，你需要对你的学生负责。你的学生在你的指示下，他们会完成一系列的行为并最终实现某项功能。
  
  课程的结果和流程步骤是难以决定的，但是必须保证结果是有意义的以及能让初学者有成就感。
  
  就如同教导儿童厨艺一样，教导他们做什么样的菜不重要，重要的是让他们享受这个过程，获得自信并想继续下去。通过这个过程让他们学会如何切菜、摆弄厨具等。
  
  使用软件就如同做菜、如同进行某项工艺一样。它是一种技术，偏使用，而不是理论知识。当我们学习某项技术的时候总是通过实践去学习，学习软件也是一样。
  
  重要的是当初学者完成教程后会对余下的文档和软件本身有一个大致的认识。
  
  大多数的软件项目的教程都不达标——教程的目的是将学习者转换为你的用户。而大多数的软件教程并不能将学习者转换为新的用户。
  
  好的教程文档编写是很难的，它必须能被初学者接受，便于跟进，有意义和具有健壮性。
  
  ### 如何编写好的教程文档
  
  * 让初学者通过做来学习
  
  如同学会说话和走路一样，我们通过做和实践来学习。
  
  在你的软件教程中，你的使用者需要通过做来学习。随着教程的学习，他们需要做不同的做不同的操作，涉及软件的主要功能点。从简单的功能逐渐过渡到复杂的功能。
  
  * 简单好入手
  最开始的教程最好一步一步的指导学习者如同教导孩子一样，通过简单的步骤就能完成，即使这个过程有瑕疵，不太规范也没关系，因为这并不是最佳实践手册。
  
  教程的目的是带领他们进入学习的旅程，而不是带着他们走到终点。
  
  * 确保你的教程有意义
  
  在学习教程的这个过程中，你扮演的角色是给予初学者自信，让他们感觉到做到做出了一些东西。
  
  其中最重要的是你提供的指导必须确保有效，初学者根据你提供的教程指导做些去必须要得到你提到的结果。
  
  如果初学者跟随你的教程一步一步的做下去却发生了错误，那么你的教程就是失败的，即使这并不是你的错。如果你的学生就在你的身边，那么你还能挽救，如果他们独立的在学习你的教程，那么你将很难解决他们出现的问题。所以最好的解决方案就是避免出现问。
  
  * 确保用户能够立马看到结果
  
  无论学习者做了多么小的改动，他都应该能够立刻感受到结果的变化。如果你的学生学习了两页的内容还没有看到结果，那么这个学习成本是非常大的。每一步操作的结果最好能力实时清晰的表现出来并让学习者感受到。
  
  教程的每一个章节或全篇的总结必须是有意义成就的。
  
  * 确保教程是可复用的
  
  教程必须可信赖且可复用。因为用户的水平不一，使用的系统也不近相同，尽管这并不容易实现。教程必须适用于所有的用户，任何时间段。
  
  因此教程需要进行定期和详细的测试以确保其可用性。
  
  * 关注具体的步骤，而不是抽象的概念
  
  教程需要具体的，通过特定的操作和行为得到特定的结果。
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
'''
tags: [
  "译文"
]
isStarred: false
isTrashed: false
